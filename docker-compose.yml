# Comando para el despliegue y agrupación por proyecto
# docker compose -p flightbooking up -d

services:
  # ---------------------------------------------------
  # Servicio Zookeeper (requerido por Kafka)
  # ---------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest        # Imagen oficial de Zookeeper
    container_name: zookeeper-flight                      # Nombre del contenedor
    ports:
      - "2182:2181"                                # Puerto para comunicación con Kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181                  # Puerto que escucha Zookeeper
      ZOOKEEPER_TICK_TIME: 2000                    # Intervalo base de sincronización
    networks:
      - flightbooking-net

  # ---------------------------------------------------
  # Servicio Kafka (broker de eventos)
  # ---------------------------------------------------
  kafka:
    image: confluentinc/cp-kafka:7.4.0             # Imagen oficial de Apache Kafka
    container_name: kafka-flight                          # Nombre del contenedor
    depends_on:
      - zookeeper                                  # Espera a que Zookeeper esté listo
    ports:
      - "9094:9092"                                # Puerto accesible desde el host
      - "9095:9093"                                # Puerto para otros contenedores (AKHQ)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - flightbooking-net

  # ---------------------------------------------------
  # AKHQ (interfaz web para monitorear Kafka)
  # ---------------------------------------------------
  akhq:
    image: tchiotludo/akhq:latest                  # UI de monitoreo para Kafka
    container_name: akhq-flight
    ports:
      - "8100:8080"                                # UI accesible en http://localhost:8099
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka-cluster:
              properties:
                bootstrap.servers: "kafka:9093"    # Comunicación interna entre contenedores
    depends_on:
      - kafka
    networks:
      - flightbooking-net

  # ---------------------------------------------------
  # PostgreSQL (base de datos principal del sistema)
  # ---------------------------------------------------
  postgres:
    image: postgres:15                             # Imagen oficial de PostgreSQL
    container_name: postgres-flight
    ports:
      - "5444:5432"                                # Puerto por defecto de PostgreSQL
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: flightbooking
    volumes:
      - postgres_data:/var/lib/postgresql/data     # Persistencia de datos
    networks:
      - flightbooking-net

  # ---------------------------------------------------
  # Redis (almacenamiento en memoria - usado como cache o cola ligera)
  # ---------------------------------------------------
  redis:
    image: redis:7
    container_name: redis-flight
    ports:
      - "6380:6379"
    networks:
      - flightbooking-net

  # ---------------------------------------------------
  # flightbooking-api: Aplicación Spring Boot
  # ---------------------------------------------------
#  flightbooking-api:
#    build:
#      context: .             # Ruta donde está el Dockerfile de e-commerce
#      dockerfile: Dockerfile
#    container_name: flightbooking-api-flight
#    depends_on:
#      - kafka
#      - redis
#      - postgres
#    ports:
#      - "8093:8093"
#    environment:
#      SPRING_PROFILE: rabbit # Selección del archivo application-rabbit.yml
#    networks:
#      - flightbooking-net

# ---------------------------------------------------
# Volúmenes persistentes
# ---------------------------------------------------
volumes:
  postgres_data:

networks:
  flightbooking-net:
    name: flightbooking-net
