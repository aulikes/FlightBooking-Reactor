plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id "org.sonarqube" version "6.2.0.5505"
}

group = 'com.aug'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.37.3'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Open API
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0'

	//Redis
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

	//PostgreSQL R2dbc - Reactive
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
//	implementation 'io.r2dbc:r2dbc-postgresql:0.8.13.RELEASE'
	runtimeOnly 'io.r2dbc:r2dbc-postgresql:0.8.13.RELEASE'

	//Liquibase
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.liquibase:liquibase-core'
//	implementation 'org.postgresql:postgresql:42.7.3'
	runtimeOnly 'org.postgresql:postgresql' // JDBC para Liquibase

	//Resilience
	implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
	implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
	implementation 'io.github.resilience4j:resilience4j-retry:2.1.0'
	implementation 'io.github.resilience4j:resilience4j-core:2.1.0'

	//RabbitMQ
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	//Kafka
	implementation 'io.projectreactor.kafka:reactor-kafka:1.3.22'
//	implementation 'org.springframework.kafka:spring-kafka'

	//StateMachine
	implementation 'org.springframework.statemachine:spring-statemachine-starter:3.2.0'

	// Lombok
	implementation "org.projectlombok:lombok:1.18.30"
	annotationProcessor "org.projectlombok:lombok:1.18.30"
	testImplementation "org.projectlombok:lombok:1.18.30"
	testAnnotationProcessor "org.projectlombok:lombok:1.18.30"

	// MapStruct
	implementation "org.mapstruct:mapstruct:1.5.5.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
	testImplementation "org.mapstruct:mapstruct:1.5.5.Final"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'io.projectreactor:reactor-test'
}

// Desactiva la generación del JAR plano, para que en build/libs/ solo exista el jar ejecutable
//jar.enabled = false

// Plataforma de pruebas
tasks.named('test') {
	useJUnitPlatform()
	include '**/*Test.class' // Solo pruebas unitarias
	finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
	include '**/*IT.class'   // Solo pruebas de integración
	shouldRunAfter test
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true  // Sonar usará este archivo
		html.required = true
		csv.required = false
	}
//	// Excluir del reporte de cobertura
//	def excludes = [
//		'com/aug/flightbooking/domain/exceptions/**',							//no Excepciones
//		'com/aug/flightbooking/infrastructure/config/**',						//no Configuraciones de Infra
//		'com/aug/flightbooking/infrastructure/init/**',							//no Inicializaciones desde Infra
//		'com/aug/flightbooking/infrastructure/web/mappers/**',					//no Mappers web in/out desde infra
//		'com/aug/flightbooking/infrastructure/web/dtos/**',						//no DTOs web in/out desde infra
//		'com/aug/flightbooking/infrastructure/persistence/entities/**'			//no Entities persistencia desde infra
//	]
//	classDirectories.setFrom(files(classDirectories.files.collect {
//		fileTree(dir: it, exclude: excludes)
//	}))
}

def sonarProps = new Properties()
file("sonar-project.properties").withReader { sonarProps.load(it) }

sonarqube {
	properties {
		sonarProps.each { k, v -> property(k, v) }
	}
}
