pipeline {
    agent any

    environment {
        NAMESPACE = "flightbooking-dev"
    }

    stages {
        stage('Crear namespace si no existe') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    sh '''
                    if ! kubectl get namespace "$NAMESPACE" >/dev/null 2>&1; then
                      kubectl create namespace "$NAMESPACE"
                    fi
                    '''
                }
            }
        }

        stage('Desplegar Zookeeper') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    dir('k8/kafka-zk') {
                        sh '''
                        kubectl apply -f 0-pv-zookeeper.yaml
                        kubectl apply -f 1-pvc-zookeeper.yaml -n "$NAMESPACE"
                        kubectl apply -f 2-configmap-zookeeper.yaml -n "$NAMESPACE"
                        kubectl apply -f 3-deployment-zookeeper.yaml -n "$NAMESPACE"
                        kubectl apply -f 4-service-zookeeper.yaml -n "$NAMESPACE"
                        '''
                    }
                }
            }
        }

        stage('Esperar Zookeeper listo') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    sh '''
                    echo "Esperando que Zookeeper est√© listo..."
                    kubectl wait --for=condition=ready pod -l app=zookeeper -n "$NAMESPACE" --timeout=90s
                    '''
                }
            }
        }

        stage('Desplegar Kafka') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    dir('k8/kafka-zk') {
                        sh '''
                        kubectl apply -f 0-pv-kafka.yaml
                        kubectl apply -f 1-pvc-kafka.yaml -n "$NAMESPACE"
                        kubectl apply -f 2-configmap-kafka.yaml -n "$NAMESPACE"
                        kubectl apply -f 3-deployment-kafka.yaml -n "$NAMESPACE"
                        kubectl apply -f 4-service-kafka.yaml -n "$NAMESPACE"
                        '''
                    }
                }
            }
        }
    }
}
