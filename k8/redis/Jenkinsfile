pipeline {
    agent any

    environment {
        NAMESPACE = "flightbooking-dev"
    }

    stages {
        stage('Eliminar recursos previos') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    dir('k8/redis') {
                        sh '''
                        kubectl delete -f 4-service-redis.yaml -n "$NAMESPACE" --ignore-not-found
                        kubectl delete -f 3-deployment-redis.yaml -n "$NAMESPACE" --ignore-not-found
                        kubectl delete -f 2-configmap-redis.yaml -n "$NAMESPACE" --ignore-not-found
                        kubectl delete -f 1-pvc-redis.yaml -n "$NAMESPACE" --ignore-not-found
                        kubectl delete -f 0-pv-redis.yaml --ignore-not-found
                        '''
                    }
                }
            }
        }

        stage('Crear namespace si no existe') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    sh '''
                    if ! kubectl get namespace "$NAMESPACE" >/dev/null 2>&1; then
                      kubectl create namespace "$NAMESPACE"
                    fi
                    '''
                }
            }
        }

        stage('Aplicar manifiestos') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    dir('k8/redis') {
                        sh '''
                        kubectl apply -f 0-pv-redis.yaml
                        kubectl apply -f 1-pvc-redis.yaml -n "$NAMESPACE"
                        kubectl apply -f 2-configmap-redis.yaml -n "$NAMESPACE"
                        kubectl apply -f 3-deployment-redis.yaml -n "$NAMESPACE"
                        kubectl apply -f 4-service-redis.yaml -n "$NAMESPACE"
                        '''
                    }
                }
            }
        }

        stage('Mostrar endpoint') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    sh '''
                    echo ""
                    PORT=$(kubectl get service redis-service -n "$NAMESPACE" -o jsonpath="{.spec.ports[0].nodePort}")

                    echo "Redis desplegado correctamente:"
                    echo "  Host: localhost"
                    echo "  Puerto: $PORT"
                    '''
                }
            }
        }
    }
}